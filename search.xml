<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>奎享雕刻破解记录</title>
      <link href="/2021/06/30/%E5%A5%8E%E4%BA%AB%E9%9B%95%E5%88%BB%E7%A0%B4%E8%A7%A3%E8%AE%B0%E5%BD%95/"/>
      <url>/2021/06/30/%E5%A5%8E%E4%BA%AB%E9%9B%95%E5%88%BB%E7%A0%B4%E8%A7%A3%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="奎享雕刻1-7-8大刀阔斧的破解记录"><a href="#奎享雕刻1-7-8大刀阔斧的破解记录" class="headerlink" title="奎享雕刻1.7.8大刀阔斧的破解记录"></a>奎享雕刻1.7.8大刀阔斧的破解记录</h1><blockquote><h2 id="本文仅用于学习交流，禁止用于商业用途"><a href="#本文仅用于学习交流，禁止用于商业用途" class="headerlink" title="本文仅用于学习交流，禁止用于商业用途"></a>本文仅用于学习交流，禁止用于商业用途</h2></blockquote><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>为什么想起来尝试破解这个呢，这是公司用的写字机的上位机，发现里边的程序时java的，插着加密狗，有点好奇java是怎么读狗的，到最后也没研究明白，只研究到了它是调用dll的某个函数读狗的，dll逆向还看不懂<br>也是因为它是java的，会写java，有初步的了解，才敢下手尝试的。……</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>破解的过程中也是取巧了，没有对解密函数进行分析（实在看不懂），提取了了已有的一个加密狗的生成的值，硬编码到了程序里边，令读狗函数固定返回这个硬编码。<br>废话也会很多，很详细的记录了过程</p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>勇于尝试，车到山前必有路。</p><p>中途遇到了一些小麻烦，反正是解决了。后边详述</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><ol><li>jar包解包工具：</li></ol><blockquote><ul><li>winrar(足够了)</li></ul></blockquote><ol start="2"><li>jar反编译工具：</li></ol><blockquote><ul><li>jd-gui-1.6.6.jar</li><li>jadx-gui-1.2.0-no-jre-win.exe</li><li>luyten-0.5.4.exe(没用上)</li></ul></blockquote><ol start="3"><li>class 字节码浏览器</li></ol><blockquote><ul><li>jclasslib_win64_5_8.exe</li></ul></blockquote><ol start="4"><li>十六进制编辑器</li></ol><blockquote><ul><li>010Editor v11.0.1 汉化特别版</li></ul></blockquote><ol start="5"><li>dll查看器</li></ol><blockquote><ul><li>IDA_Pro_v7.0_Portable</li></ul></blockquote><p>最后，写java代码的idea就不用介绍了吧，各位爱用啥用啥就是了</p><h3 id="下载-安装-分析"><a href="#下载-安装-分析" class="headerlink" title="下载/安装/分析"></a>下载/安装/分析</h3><p>下载安装跳过</p><ol><li>打开文件夹看看<br><img src="1.png" alt="Alt text" title="安装文件夹"></li></ol><p>由于不会exe的逆向，而且体积这么大的一个jar，很值得打开瞧瞧。<br>直接用jar反编译工具打开，先找main函数（java的入口函数）</p><ol start="2"><li>用jadx打开映入眼帘的就是com了，找吧，熟悉的launcher，很顺利，就在这里，那接下来的工作就比较简单了：<br>复制这个class的反编译代码，扔idea里开始做手术。<br>肯定提示缺包， 将这个大jar包作为lib引入就行（后边才知道，差点死在这一步，jar包没有混淆。我才能顺利的作为lib引入）</li></ol><p><img src="2.png" alt="Alt text" title="Launcher_guard.jar"></p><ol start="3"><li>扔idea里之后就可以进行分析啦，上边无非都是读配置，环境检查<br>从这里才是引起我注意的代码。<br>i只是读了个配置，觉得有用，输出来看看，最后发现，似乎没啥用<br>l就是了，l就是读取的加密狗的函数，追进去看看都做了什么操作。</li></ol><p><img src="3.png" alt="Alt text" title="main函数分析"></p><ol start="4"><li>追l<br><img src="4.png" alt="Alt text" title="追l"><br>好家伙，就一行，继续追,一眼望去 一堆return “”;<br>既然是注册码，return “”;的统统干掉！<br><img src="5.png" alt="Alt text" title="继续追"><br>代码瞬间清爽了许多，可以看到  这个outstring一定就是狗里的东西了，而上边的DevicePath,ID1,ID2，就肯定是狗的信息了。<br>这就是我在这个函数中间写出outsting到文件之后，硬编码到return里了：<br><img src="6.png" alt="Alt text" title="简化"></li></ol><p>然后我还尝试用IDA查看了这个jsyunew3.dll的NewReadString，嗯，压根看不懂。就更没办法写注册机了（加密狗写注册机有毛用！摔！）</p><p>这个类上边有这个名字，这应该就是java加载dll的方式，但是还没研究明白，知道它加载了dll，调用了dll的函数，研究破解来说知道这些够用了，<br>就是这行调用了dll，确信，下边这些肯定就是形如接口一样的东西了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">static &#123;</span><br><span class="line">    System.load(b.e(String.valueOf(String.valueOf(Platform.is64Bit() ? &quot;x64&quot; : &quot;x86&quot;)) + &quot;/jsyunew3.dll&quot;).getAbsolutePath());</span><br><span class="line">&#125;</span><br><span class="line">public static native int GetVersion(final String p0);</span><br><span class="line"></span><br><span class="line">public static native int GetVersionEx(final String p0);</span><br><span class="line"></span><br><span class="line">public static native long GetID_1(final String p0);</span><br><span class="line"></span><br><span class="line">public static native long GetID_2(final String p0);</span><br><span class="line"></span><br><span class="line">public static native long get_LastError();</span><br><span class="line"></span><br><span class="line">public static native String FindPort(final int p0);</span><br><span class="line"></span><br><span class="line">public static native String NewReadString(final int p0, final int p1, final String p2, final String p3, final String p4);</span><br><span class="line"></span><br><span class="line">public static native int ReSet(final String p0);</span><br></pre></td></tr></table></figure><p>然后我就想到了第二个破解思路：能不能让这个return直接返回这个硬编码的字符串，以及那个FindPort函数能不能直接返回一个正确的值，这样就可以比较小的修改了，然后结果就是，不会！然后当场放弃。<br><img src="7.png" alt="Alt text" title="dll的NewReadString"></p><ol start="5"><li>编译<br>然后就编译呗！用winrar打开jar，把编译后的这个jsyunew3.class替换掉,运行那个.exe，哦吼！<br><img src="8.png" alt="Alt text" title="哦吼。"><br>那还能怎么办，搜呗，既然是在窗口里，那很有可能在launcher这个里，用jad搜字符串找呗，然后就发现这个玩意果然在，那么，统统注释掉！<br><img src="9.png" alt="Alt text" title="统统注释！"><br>然后编译，打开！一路确认，然后又来一个，同样的操作，去jad里搜呗。<br><img src="10.png" alt="Alt text" title="又来一个"><br>嗯？没有？<br><img src="11.png" alt="Alt text" title="嗯？"><br>那肯定在其他类里，又不是只有一个类可以创建窗口，翻！<br>结果翻遍了每一个类，没有！<br>事情变得复杂了起来。那只有去分析main函数具体都做了什么了，然后看看为什么没有这一个字符串。</li><li>回头继续分析main<br><img src="12.png" alt="Alt text" title="继续分析main"><br>分析得出： 这个while是不断地弹框，如果没有插加密狗，肯定读不出来l 就会是上边第4里边return的空字符串，因为已经硬编码写死返回值了，所以这个while直接跳过，进入最终的KenjoyDrawLauncher.j.a();</li><li>追a();<br>哟，这不是刚注释了弹窗的那个方法嘛，接着往下看吧<br><img src="13.png" alt="Alt text" title="哟，这不熟悉的小老弟吗"><br>继续往下分析，从上往下，这是根据l创建了个json，然后操作了一番，咱这l肯定没有问题，就不管对l做什么了，没有意义。<br><img src="14.png" alt="Alt text" title="继续向下"><br>看最后，this.a(jsonObject);<br>不用说，追进去。<br>长这样<br><img src="15.png" alt="Alt text" title="追到a()"><br>简单解释一下代码吧：<br>if这里判断了是否存在，追进去看<br>b=D.b() 追进去D.b()发现用了core这个文件。那这个core应该也是个jar，然后WinRar打开试试，发现打不开，010打开看文件头，啥也不是。不是jar，往后继续分析代码<br>往下看发现，又用到了l，先看看this.a(b) 看看对文件core做了什么<br><img src="16.png" alt="Alt text" title="创建了临时文件"><br>看不懂（破解到后边看懂了，实则是解密byte流），但是看得出来输出了一个前缀xxx后缀xxx的临时文件，退出时删除，然后最后返回值就是这个临时文件。那咱就去看看！<br>把这个临时文件复制出来之后，尝试用WinRar打开，哎呀，打开了，反编译！</li><li>反编译！<br>直接碰壁，一个源代码都反编译不出来。会不会是jadx不够强大，换换工具试试看，jd，luyten都试了，哪个都不行！<br><img src="17.png" alt="Alt text" title="反编译临时文件"><br>先保存一下进度，把这个临时文件重命名成core，替换掉安装目录里的core，然后让上边那个函数返回this.g的，直接返回file（执行了一堆寂寞）<br>然后我就去万能的Q群求助了，经过麦兜指点，忽略了一个问题，class的文件头（魔数）不对，不是class的文件头，也是这个时候知道了，文件头还叫魔数<br>既然文件头不对，那肯定就是加密了。继续分析！看看哪里解密class文件了！</li><li>寻找解密class的地方<br>那就继续找第7步第三个图的C.a(this.a(b),bulabulabula);了<br>追进去这个a();瞧瞧看,好家伙，继承了ClassLoader，想必就是传说中的类加载器，又是知识盲区，硬着头皮看吧。研究这个玩意是花费时间比较久的。<br><img src="18.png" alt="Alt text" title="C.a()"><br>然后接下来再看a里都做了什么，翻来覆去的读。哪都不是解密class的啊！<br><img src="19.png" alt="Alt text" title="a()"><br>花了很长时间研究，然后后来脑子开窍了，既然是类加载器，那肯定是用来加载class的，既然加载class，文件头又对不上，那么加载之前一定是解密了，这个a里没有， 那肯定就在其他地方，寻找可疑函数。<br>最后定位到了findclass，英文直译：寻找类文件，嗯，满足猜想的一个方法。<br><img src="20.png" alt="Alt text" title="FindClass"><br>往里看,又发现了可疑方法DecodeClassFile,英文直译：解密类文件！<br>可算找到了，接下来事情就明朗了，跟搞core文件思路类似，还是大刀阔斧的修改，修改后如下，为啥要判断呢，因为要替换core里边的class。所以加上之后调试起来方便点。<br><img src="21.png" alt="Alt text" title="大刀阔斧修改后的FindClass"><br>将这个字节数组a，导出成文件的代码如下</li></ol><p>导出成文件写的代码也比较水,凑合看，这就是上边图例收起来的代码<br>也是通过导出s，判断出来传进来的s就是类的包名+类名，然后就这样输出了所有文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尝试输出byte</span></span><br><span class="line">String d = s.replace(<span class="string">"."</span>,<span class="string">"\\"</span>);</span><br><span class="line">File file3 = <span class="keyword">new</span> File(<span class="string">"testtest\\"</span>+d+<span class="string">"class"</span>);</span><br><span class="line"><span class="keyword">if</span> (!file3.getParentFile().exists()) &#123;</span><br><span class="line">    file3.getParentFile().mkdirs();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    file3.renameTo(<span class="keyword">new</span> File(<span class="string">"testtest\\"</span> + d + <span class="string">".class1"</span>));</span><br><span class="line">&#125;</span><br><span class="line">file3.createNewFile();</span><br><span class="line">OutputStream out3 = <span class="keyword">new</span> FileOutputStrea(file3);</span><br><span class="line">InputStream is3 = <span class="keyword">new</span> ByteArrayInputStrea(a);</span><br><span class="line"><span class="keyword">byte</span>[] buff3 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len3 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((len3=is3.read(buff3))!=-<span class="number">1</span>)&#123;</span><br><span class="line">    out3.write(buff3, <span class="number">0</span>, len3);</span><br><span class="line">&#125;</span><br><span class="line">is3.close();</span><br><span class="line">out3.close();</span><br></pre></td></tr></table></figure><p>为啥要判断文件是否存在，是因为！ core这个jar同路径下有大小写不同的两个同名class（混淆过）！ 在windows下不区分大小写！然后我就装了个linux虚拟机，又是一上午。下了个arm64的 咋都装不进vmware，后来发现下错了，然后才下了个x86_x64的。然后问百度找linux替换class的命令，鼓捣jdk之类的，放进去了。</p><ol start="10"><li>一切ok之后！就到了找“再进行操作”字符串的步骤了！<br>找到是在core.jar\com\kenjoy\kenjoycnc\k\a这个类里边<br>跟上边一样，大刀阔斧的修改，发现无法编译！<br><img src="22.png" alt="Alt text" title="大刀阔斧修改后的a"><br>然后百度后的结果都指向了是因为混淆的原因。<br>然后没招了，祭出010editor，比较小剂量的修改，就是反转这两个if的判定结果，一个一个试。先反转第一个的判定结果<br>用jclasslib跟010都打开a.class<br>jclasslib：<br><img src="23.png" alt="Alt text" title="jclasslib下的a"><br>根据jclasslib的指示，在010editor里边找到method[0]的code部分的第137行<br>010editor：<br><img src="24.png" alt="Alt text" title="010editor下的a"><br>然后在jclasslib里点击ifeq，弹出来的页面搜索ifeq,往下看就能看到0x99对应ifeq,与ifeq相反的ifne的值为0x9A。<br><img src="25.png" alt="Alt text" title="查if的每个值"><br>接下来只需要将99改为9A然后放回core里试试。<br><img src="26.png" alt="Alt text" title="修改ifeq为ifne"><br>打开exe<br><img src="27.png" alt="Alt text" title="大功告成"><br>大功告成</li></ol><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>一边写一边复盘了整个过程，发现有很多地方确实是运气好，比如一开始，壳都没有查，混淆也没看，结果就是没有混淆没有壳，然后我才能很顺利的将第一个jar给反编译之后修改并编译回去。</p><h2 id="最最后"><a href="#最最后" class="headerlink" title="最最后"></a>最最后</h2><p>提供下载链接<br>源文件+crack<br>链接：<a href="https://pan.baidu.com/s/1x5FBspSXtBeKGaqMsccckg" target="_blank" rel="noopener">https://pan.baidu.com/s/1x5FBspSXtBeKGaqMsccckg</a><br>提取码：65a9<br>源文件：<br>链接：<a href="https://pan.baidu.com/s/1L-eCjF739AQD9BDml6_tCQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1L-eCjF739AQD9BDml6_tCQ</a><br>提取码：gvhz </p><h2 id="侵删"><a href="#侵删" class="headerlink" title="侵删!!"></a>侵删!!</h2>]]></content>
      
      
      <categories>
          
          <category> 破解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 写字机 </tag>
            
            <tag> 奎享雕刻 </tag>
            
            <tag> 破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用IDEA中的Maven插件将本地Jar包添加到本地的Maven仓库并引用</title>
      <link href="/2019/10/26/%E4%BD%BF%E7%94%A8IDEA%E4%B8%AD%E7%9A%84Maven%E6%8F%92%E4%BB%B6%E5%B0%86%E6%9C%AC%E5%9C%B0Jar%E5%8C%85%E6%B7%BB%E5%8A%A0%E5%88%B0%E6%9C%AC%E5%9C%B0%E7%9A%84Maven%E4%BB%93%E5%BA%93%E5%B9%B6%E5%BC%95%E7%94%A8/"/>
      <url>/2019/10/26/%E4%BD%BF%E7%94%A8IDEA%E4%B8%AD%E7%9A%84Maven%E6%8F%92%E4%BB%B6%E5%B0%86%E6%9C%AC%E5%9C%B0Jar%E5%8C%85%E6%B7%BB%E5%8A%A0%E5%88%B0%E6%9C%AC%E5%9C%B0%E7%9A%84Maven%E4%BB%93%E5%BA%93%E5%B9%B6%E5%BC%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>这也是我刚刚遇到的问题，在maven项目中准备使用一个本地jar包。</p><a id="more"></a><p>所用idea版本为：2019.2.3</p><p>maven是我自己安装的，非idea自带，版本为：3.6.1</p><p>maven配置如下：</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a><img src="maven%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE.jpg" alt="maven相关配置">正文</h1><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>在idea右侧边栏找到MAVEN</p><p><img src="%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%9A%E6%89%BE%E5%88%B0MAVEN%E4%BE%A7%E8%BE%B9%E6%A0%8F.jpg" alt="第一步：找到MAVEN侧边栏"></p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>在弹出的窗口中找到 “Execute Maven Goal” </p><p><img src="%E7%AC%AC%E4%BA%8C%E6%AD%A5.jpg" alt="第二步"></p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>会出现如下窗口：</p><p><img src="%E7%AC%AC%E4%B8%89%E6%AD%A5%EF%BC%9A%E8%BE%93%E5%85%A5%E6%B7%BB%E5%8A%A0%E8%AF%AD%E5%8F%A5.jpg" alt="第三步：输入添加语句"></p><p>在出现的窗口中输入:</p><p>前边的mvn不要删 直接在后边添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">install:install-file -Dfile=&lt;Jar包的地址&gt; </span><br><span class="line">                     -DgroupId=&lt;Jar包的GroupId&gt; </span><br><span class="line">                     -DartifactId=&lt;Jar包的引用名称&gt; </span><br><span class="line">                     -Dversion=&lt;Jar包的版本&gt; </span><br><span class="line">                     -Dpackaging=&lt;Jar的打包方式&gt;</span><br></pre></td></tr></table></figure><p>以我刚添加的”AXMLPrinter2.ar”为例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">install:install-file -Dfile=D:\User\下载\AXMLPrinter2.jar</span><br><span class="line">                     -DgroupId=com.AXMLPrinter2</span><br><span class="line">                     -DartifactId=AXMLPrinter</span><br><span class="line">                     -Dversion=2.0.0</span><br><span class="line">                     -Dpackaging=jar</span><br></pre></td></tr></table></figure><p>输入完毕回车</p><p>在控制台输出BUILD SUCCESS字样即为添加成功</p><h2 id="添加完毕"><a href="#添加完毕" class="headerlink" title="添加完毕"></a>添加完毕</h2><p>然后在本地maven仓库的目录中就可以找到我们添加的jar包</p><p><img src="%E6%B7%BB%E5%8A%A0%E6%88%90%E5%8A%9F.jpg" alt="添加成功"></p><h2 id="引用jar包"><a href="#引用jar包" class="headerlink" title="引用jar包"></a>引用jar包</h2><p>只要我们添加jar包到本地仓库，就可以在pom.xml直接引用</p><p>例如我刚才添加的jar包即可像这样引用：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.AXMLPrinter2<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>AXMLPrinter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>最好是用自己安装的maven,由于我一开始就使用了自己安装的maven，所以并不清楚使用自带的maven会出现什么问题。</p>]]></content>
      
      
      <categories>
          
          <category> idea </category>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
            <tag> Maven </tag>
            
            <tag> Maven仓库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown入门语法</title>
      <link href="/2019/08/31/MarkDown%E5%85%A5%E9%97%A8%E8%AF%AD%E6%B3%95/"/>
      <url>/2019/08/31/MarkDown%E5%85%A5%E9%97%A8%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>第一篇博客准备写写Markdown的入门用法，自己也是接触MarkDown不久，也是自己常用的一些用法。语法均为Visual Studio Code下的用法及截图，也可以选择使用Typora更为方便……</p><a id="more"></a><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br><span class="line"><span class="section">####### 七级标题</span></span><br></pre></td></tr></table></figure><p><img src="%E6%A0%87%E9%A2%98%E6%95%88%E6%9E%9C.png" alt="img"></p><p>前边的 # 号数量代表标题等级，后边带文字，分别代表h1-h6，上图可以看出，直到h6，而且h1下会有一条横线，注意，#号后边有空格</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>列表分为有序列表和无序列表，下面直接展示2种列表的写法：</p><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>苹果</span><br><span class="line"><span class="bullet">* </span>香蕉</span><br><span class="line"><span class="bullet">* </span>梨子</span><br><span class="line"></span><br><span class="line"><span class="bullet">+ </span>西瓜</span><br><span class="line"><span class="bullet">+ </span>菠萝</span><br><span class="line"><span class="bullet">+ </span>荔枝</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>Java</span><br><span class="line"><span class="bullet">- </span>Python</span><br><span class="line"><span class="bullet">- </span>C++</span><br></pre></td></tr></table></figure><p>效果</p><ul><li>苹果</li><li>香蕉</li><li>梨子</li></ul><ul><li>西瓜</li><li>菠萝</li><li>荔枝</li></ul><ul><li>Java</li><li>Python</li><li>C++</li></ul><p>可以看到，无序列表可以用* ， + ， — 来创建，使用哪个都可以，习惯使用*。</p><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>打开冰箱</span><br><span class="line"><span class="bullet">2. </span>把大象放进去</span><br><span class="line"><span class="bullet">3. </span>关上冰箱</span><br></pre></td></tr></table></figure><ol><li>打开冰箱</li><li>把大象放进去</li><li>关上冰箱</li></ol><p>有序列表只有这一种方式，数字之后的点只能是英文的点。</p><p>特别注意，有序列表的序号是按照第一项的数字依次排列的，例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">3. </span>打开冰箱</span><br><span class="line"><span class="bullet">2. </span>把大象放进去</span><br><span class="line"><span class="bullet">1. </span>关上冰箱</span><br></pre></td></tr></table></figure><ol start="3"><li>打开冰箱</li><li>把大象放进去</li><li>关上冰箱</li></ol><p>再例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">3. </span>打开冰箱</span><br><span class="line"><span class="bullet">8. </span>把大象放进去</span><br><span class="line"><span class="bullet">5. </span>关上冰箱</span><br></pre></td></tr></table></figure><ol start="3"><li>打开冰箱</li><li>把大象放进去</li><li>关上冰箱</li></ol><p>均无法打乱有序列表的序号。</p><h3 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h3><p>想引用某一部分内容就可以使用该语句</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>不以结婚为目的的谈恋爱都叫耍流氓</span><br><span class="line"><span class="code">    &gt; 这是毛主席说的</span></span><br><span class="line"><span class="bullet">* </span>前方高能</span><br><span class="line"><span class="code">    &gt; 注意：这里是为了提醒前方有很刺激的事情，</span></span><br><span class="line"><span class="code">    请做好准备！</span></span><br></pre></td></tr></table></figure><ul><li><p>不以结婚为目的的谈恋爱都叫耍流氓</p><blockquote><p>这是毛主席说的</p></blockquote></li><li><p>前方高能</p><blockquote><p>注意：这里是为了提醒前方有很刺激的事情，请做好准备！</p></blockquote></li></ul><p>在这里，无序列表下方的就是引用，用法就是在前边加一个&gt;(大于号)。</p><p>引用因为是一个区块，理论上什么内容都可以放，比如：标题，列表，引用等等。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;* 不以结婚为目的的谈恋爱都叫耍流氓</span><br><span class="line"><span class="quote">&gt;    &gt; 这是毛主席说的</span></span><br><span class="line">&gt;* 前方高能</span><br><span class="line"><span class="quote">&gt;    &gt; 注意：这里是为了提醒前方有很刺激的事情，</span></span><br><span class="line"><span class="code">    请做好准备！</span></span><br></pre></td></tr></table></figure><blockquote><ul><li><p>不以结婚为目的的谈恋爱都叫耍流氓</p><blockquote><p>这是毛主席说的</p></blockquote></li><li><p>前方高能<br>注意：这里是为了提醒前方有很刺激的事情，请做好准备！</p></li></ul></blockquote><p>而且引用里边可以嵌套引用：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 一级引用</span></span><br><span class="line">&gt;&gt; 二级引用</span><br><span class="line">&gt;&gt;&gt; 三级引用</span><br><span class="line">&gt;&gt;&gt;&gt; 四级引用</span><br><span class="line">&gt;&gt;&gt;&gt;&gt; 五级引用</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt; 六级引用</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; 七级引用</span><br></pre></td></tr></table></figure><blockquote><p>一级引用</p><blockquote><p>二级引用</p><blockquote><p>三级引用</p><blockquote><p>四级引用</p><blockquote><p>五级引用</p><blockquote><p>六级引用</p><blockquote><p>七级引用</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><p>如上所示，引用理论上可以无限嵌套，注意：多层嵌套的&gt; 是不需要连续在一起的，只需要在一行即可，中间允许有空格，使用时请注意排版。</p><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>分割线可以由* - _（星号，减号，下划线）这3个符号的至少3个符号表示，注意至少要3个，且不需要连续，有空格也可以</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">***</span></span><br><span class="line"><span class="strong">*****</span>*</span><br><span class="line">---</span><br><span class="line"><span class="bullet">- </span>- -</span><br><span class="line"><span class="bullet">* </span><span class="bullet">* *</span></span><br><span class="line">------------------</span><br><span class="line"><span class="emphasis">_ _</span> _</span><br></pre></td></tr></table></figure><hr><hr><hr><hr><hr><hr><hr><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>支持两种连接方式：行内式和参数是，不管是哪种，链接文字都用 [ 中括号 ] 来标记。</p><h4 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">妙语连珠</span>](<span class="link">www.baidu.com</span>)是什么意思</span><br></pre></td></tr></table></figure><p><a href="www.baidu.com">妙语连珠</a>是什么意思</p><p>如图所示行内式的链接格式是：链接文字放在 [ 中括号 ] 内，链接地址放在 ( 小括号 ) 内 。</p><p>链接还可以带title属性。注意空格</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">妙语连珠</span>](<span class="link">www.baidu.com "说明"</span>)是什么意思</span><br></pre></td></tr></table></figure><p><a href="www.baidu.com" title="说明">妙语连珠</a>是什么意思</p><h4 id="参数式"><a href="#参数式" class="headerlink" title="参数式"></a>参数式</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">name</span>]:<span class="link">www.baidu.com "说明1"</span></span><br><span class="line">[<span class="symbol">home</span>]:<span class="link">www.baidu.com "说明2"</span></span><br><span class="line">[<span class="symbol">甚至是中文</span>]:<span class="link">www.baidu.com "中文变量配中文说明"</span></span><br><span class="line">这里是[name],这里是[home],这里[甚至是中文]。</span><br></pre></td></tr></table></figure><p>这里是<a href="www.baidu.com" title="说明1">name</a>,这里是<a href="www.baidu.com" title="说明2">home</a>,这里<a href="www.baidu.com" title="中文变量配中文说明">甚至是中文</a>。</p><p>这里也不难理解，把链接作为参数，适合出现很多相同链接的场景，注意参数的对应关系。</p><h3 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h3><p>这算是比较重要的，很多时候都需要展示一些代码。</p><p>如果代码量较少可以用单行代码框，单反引号包裹代码,如下</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\`</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span></span><br><span class="line">\`</span><br></pre></td></tr></table></figure><p><code>&lt;input type=&quot;text&quot;&gt;</code></p><p>代码量较多可以使用三个反引号开头，空格后加代码的高亮格式，也是本文章所有代码框的形式，</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\<span class="code">`\`</span>\`</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span></span><br><span class="line">System.out.println("Hello World!");</span><br><span class="line">cout<span class="xml"><span class="tag">&lt;&lt;"<span class="attr">Hello</span> <span class="attr">World</span>";</span></span></span><br><span class="line"><span class="xml">\`\`\`</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span>&gt;</span><br><span class="line">System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">cout&lt;&lt;<span class="string">"Hello World"</span>;</span><br></pre></td></tr></table></figure><p>可以在行内写注释，根据不同高亮格式的要求，注释语法也不同</p><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>\`</span><br><span class="line"><span class="bullet">* </span>\*</span><br><span class="line"><span class="bullet">* </span>\\</span><br><span class="line"><span class="bullet">* </span>\_</span><br><span class="line"><span class="bullet">* </span>\-</span><br><span class="line"><span class="bullet">* </span>\+</span><br><span class="line"><span class="bullet">* </span>\.</span><br><span class="line"><span class="bullet">* </span>\!</span><br></pre></td></tr></table></figure><ul><li>`</li><li>*</li><li>\</li><li>_</li><li>-</li><li>+</li><li>.</li><li>!</li></ul><p>跟大多数语言保持一致</p><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~删除线展示~~</span><br></pre></td></tr></table></figure><p><del>删除线展示</del></p><p>常用的基本上就这些了，希望为你的学习带来帮助！</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="http://www.appinn.com/markdown/" target="_blank" rel="noopener">http://www.appinn.com/markdown/</a></p><p><a href="http://sspai.com/25137" target="_blank" rel="noopener">http://sspai.com/25137</a></p>]]></content>
      
      
      <categories>
          
          <category> MarkDown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
            <tag> 入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/08/30/hello-world/"/>
      <url>/2019/08/30/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
